import uuid
import os
from jinja2 import Template

def generate_travel_webpage(all_tables, user_email=None):
    """
    Generate a unique webpage for a travel plan.
    
    Args:
        all_tables (str): Concatenated string of formatted ASCII tables
        user_email (str, optional): Email of the user for personalization
        
    Returns:
        str: URL or path to the generated webpage
    """
    # Generate a unique identifier
    unique_id = uuid.uuid4().hex
    
    # Prepare the webpage filename
    webpage_filename = f"travel_plan_{unique_id}.html"
    
    # Split tables into sections
    sections = all_tables.split('\n\n')
    
    # Prepare section data with proper HTML formatting
    formatted_sections = []
    for section_str in sections:
        if section_str.strip():
            # Split the section into lines
            lines = section_str.split('\n')
            
            # Extract title (first line)
            title = lines[0].strip()
            
            # Process table rows
            rows = []
            for line in lines[1:]:  # Skip title line
                if '|' in line:
                    # Split and clean row data
                    row_cells = [cell.strip() for cell in line.split('|') if cell.strip()]
                    
                    # Convert markdown links to HTML
                    processed_cells = []
                    for cell in row_cells:
                        # Check for markdown link [text](url)
                        if cell.startswith('[') and cell.endswith(')'):
                            import re
                            match = re.match(r'\[([^\]]+)\]\(([^\)]+)\)', cell)
                            if match:
                                link_text, link_url = match.groups()
                                cell = f'<a href="{link_url}" target="_blank">{link_text}</a>'
                        processed_cells.append(cell)
                    
                    rows.append(processed_cells)
            
            formatted_sections.append({
                'title': title,
                'rows': rows
            })
    
    # Jinja2 template for the travel plan webpage
    html_template = Template("""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Your Travel Plan</title>
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
        <style>
            body {
                background-color: #f4f4f4;
            }
        </style>
    </head>
    <body class="font-sans antialiased">
        <div class="container mx-auto px-4 py-8 max-w-4xl">
            <div class="bg-white shadow-lg rounded-lg overflow-hidden">
                <div class="px-6 py-4 bg-blue-600 text-white">
                    <h1 class="text-3xl font-bold">Your Travel Plan</h1>
                    <p class="text-blue-100">Generated on {{ generation_date }}</p>
                </div>
                
                {% for section in sections %}
                <div class="px-6 py-4 border-b">
                    <h2 class="text-2xl font-semibold text-blue-700 mb-4">{{ section.title }}</h2>
                    <div class="overflow-x-auto">
                        <table class="w-full bg-white">
                            {% for row in section.rows %}
                                {% if loop.first %}
                                <thead>
                                    <tr class="bg-blue-50 text-blue-800">
                                        {% for cell in row %}
                                        <th class="px-4 py-2 text-left font-bold border">{{ cell }}</th>
                                        {% endfor %}
                                    </tr>
                                </thead>
                                <tbody>
                                {% else %}
                                    <tr class="{{ 'bg-gray-50' if loop.index is divisibleby(2) else 'bg-white' }}">
                                        {% for cell in row %}
                                        <td class="px-4 py-2 border">{{ cell | safe }}</td>
                                        {% endfor %}
                                    </tr>
                                {% endif %}
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
                {% endfor %}
                
                <div class="px-6 py-4 bg-gray-100 text-center text-sm text-gray-600">
                    Generated by PocketTraveller
                </div>
            </div>
        </div>
    </body>
    </html>
    """)
    
    # Render the template
    from datetime import datetime
    rendered_html = html_template.render(
        sections=formatted_sections,
        generation_date=datetime.now().strftime("%B %d, %Y")
    )
    
    # Save the webpage
    with open(webpage_filename, 'w') as f:
        f.write(rendered_html)
    
    # Here you would typically:
    # 1. Upload the file to a static file hosting service
    # 2. Generate a unique public URL
    # For now, we'll just return the local filename
    return webpage_filename

